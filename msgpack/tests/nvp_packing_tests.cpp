//
// Created by Mike Loomis on 8/21/2019.
//

#include <catch2/catch.hpp>

#include "msgpack/msgpack.hpp"

#include <iomanip>

struct ManyTypes {
  int a = 1;
  float b = 0.5;
  bool c = true;
  std::nullptr_t d;
  std::string e{"Foo bar"};
  std::array<std::string, 2> f{{"Foo", "Bar"}};

  template<class T>
  void pack(T &pack) {
    pack(a, b, c, d, e, f);
  }
};

struct ObjectWithNestedType {
  ManyTypes a{};

  template<class T>
  void pack(T &pack) {
    pack(a);
  }
};

TEST_CASE("Complex nvp test") {
  ManyTypes example{};
  auto data = msgpack::nvp_pack(example);

  REQUIRE(data == std::vector<uint8_t>{0x86, 0xa1, 0x30, 0x1, 0xa1, 0x31, 0xca, 0x3f, 0x0, 0x0, 0x0, 0xa1, 0x32, 0xc3,
                                       0xa1, 0x33, 0xc0, 0xa1, 0x34, 0xa7, 0x46, 0x6f, 0x6f, 0x20, 0x62, 0x61, 0x72,
                                       0xa1, 0x35, 0x92, 0xa3, 0x46, 0x6f, 0x6f, 0xa3, 0x42, 0x61, 0x72});
}

TEST_CASE("Can unpack javascript objects") {
  auto imported_js_msgpack =
      std::vector<uint8_t>{0x87, 0xA3, 0x69, 0x6E, 0x74, 0x01, 0xA5, 0x66, 0x6C, 0x6F, 0x61, 0x74, 0xCB, 0x3F, 0xE0,
                           0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA7, 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0xC3,
                           0xA4, 0x6E, 0x75, 0x6C, 0x6C, 0xC0, 0xA6, 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0xA7, 0x66,
                           0x6F, 0x6F, 0x20, 0x62, 0x61, 0x72, 0xA5, 0x61, 0x72, 0x72, 0x61, 0x79, 0x92, 0xA3, 0x66,
                           0x6F, 0x6F, 0xA3, 0x62, 0x61, 0x72, 0xA6, 0x6F, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x82, 0xA3,
                           0x66, 0x6F, 0x6F, 0x01, 0xA3, 0x62, 0x61, 0x7A, 0xCB, 0x3F, 0xE0, 0x00, 0x00, 0x00, 0x00,
                           0x00, 0x00};

  REQUIRE(msgpack::nvp_unpack<ManyTypes>(imported_js_msgpack).a == 1);
//  REQUIRE(msgpack::nvp_unpack<ManyTypes>(imported_js_msgpack).b == 0.5f); // TODO: Fix double deserializing
  REQUIRE(msgpack::nvp_unpack<ManyTypes>(imported_js_msgpack).c);
  REQUIRE(msgpack::nvp_unpack<ManyTypes>(imported_js_msgpack).d == std::nullptr_t{});
  REQUIRE(msgpack::nvp_unpack<ManyTypes>(imported_js_msgpack).e == "foo bar");
  REQUIRE(msgpack::nvp_unpack<ManyTypes>(imported_js_msgpack).f == std::array<std::string, 2>{{"foo", "bar"}});
}

TEST_CASE("Nested types can also be packed with NVP style") {
  ObjectWithNestedType test{};
  auto data = msgpack::nvp_pack(test);

  REQUIRE(data == std::vector<uint8_t>{0x81, 0xA1, 0x30, 0x86, 0xA1, 0x30, 0x01, 0xA1, 0x31, 0xCA, 0x3F, 0x00, 0x00,
                                       0x00, 0xA1, 0x32, 0xC3, 0xA1, 0x33, 0xC0, 0xA1, 0x34, 0xA7, 0x46, 0x6F, 0x6F,
                                       0x20, 0x62, 0x61, 0x72, 0xA1, 0x35, 0x92, 0xA3, 0x46, 0x6F, 0x6F, 0xA3, 0x42,
                                       0x61, 0x72});
}